/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *
 * Jan Veverka, Caltech, 25 Nov 2011
 * The Beta Generalised Hyperbolic Secant Distribution.
 * 
 * http://www.statistik.wiso.uni-erlangen.de/forschung/d0064.pdf
 * The Beta-Hyperbolic Secant (BHS) Distribution
 * Matthias J. Fischer, David Vaughan
 *****************************************************************************/ 

// Implementation of the Beta Generalised Hyperbolic Secant Density 

#include "Riostream.h" 

#include "JPsi/MuMu/interface/RooBetaGshPdf.h" 
#include "JPsi/MuMu/interface/Math.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooBetaGshPdf) 

 RooBetaGshPdf::RooBetaGshPdf(const char *name, const char *title, 
			      RooAbsReal& _x,
			      RooAbsReal& _mean,
			      RooAbsReal& _width,
			      RooAbsReal& _t,
			      RooAbsReal& _beta,
			      RooAbsReal& _theta) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   width("width","width",this,_width),
   t("t","First Kurtosis Parameter",this,_t),
   beta("beta","Asymmetry Parameter",this,_beta),
   theta("theta","Second Kurtosis Parameter",this,_theta)
 { 
 } 


 RooBetaGshPdf::RooBetaGshPdf(const RooBetaGshPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   width("width",this,other.width),
   t("t",this,other.t),
   beta("beta",this,other.beta),
   theta("theta",this,other.theta)
 { 
 } 



 Double_t RooBetaGshPdf::evaluate() const 
 { 
   const static double epsilon = 1e-2;

  // Absorb the location and scale paramters
  double dx = (x - mean) / width;

  // The GSH density
  double f = cit::math::gsh(dx, t) / width;

  // The GSH CDF
  double F = cit::math::gshCdf(dx, t);

  // Make sure that the CDF value is sane.
  if (F <= 0) {
    Error("RooBetaGshPdf::evaluate", "Illegal CDF value: %g", F);
    F = epsilon;
  }

  if (1 <= F) {
    Error("RooBetaGshPdf::evaluate", "Illegal CDF value: %g", F);
    x.arg().Print();
    mean.arg().Print();
    width.arg().Print();
    t.arg().Print();
    F = 1 - epsilon;
  }

  // Make sure that beta_ and theta_ are in allowed range.
  double beta_ = beta > 0 ? beta : 0;
  double theta_ = theta;

  if (theta_ <= -beta_) 
    theta_ = -beta_ + 1e-2;
  else if (beta_ <= theta_)
    theta_ = beta_ - 1e-2;

  // Calculate the morphing weight of the Beta PDF
  // std::cout << "x, p, q: " << F << ", " << beta_ + theta_ << ", "
  // 	    << beta_ - theta_ << std::endl;
  double w = TMath::BetaDist(F, beta_ + theta_, beta_ - theta_);
              
   return f * w; 
 } 



