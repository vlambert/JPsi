/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

/**
 *  Jan Veverka, Caltech, 24 November 2011
 *  Truncated exponential PDF
 *
 *                                     /  exp(alpha*|x-mean|)
 *                                    |   for x in [xmin, xmax]
 * f(x|xmin, xmax, alpha, epsilon) = < 
 *                                    |   epsilon * exp(alpha*|x-mean|) 
 *                                     \  otherwise
 */

#include "Riostream.h" 

#include "JPsi/MuMu/interface/RooTruncatedExponential.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooTruncatedExponential) 

 RooTruncatedExponential::RooTruncatedExponential(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _xmin,
                        RooAbsReal& _xmax,
                        RooAbsReal& _alpha,
                        RooAbsReal& _epsilon) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   xmin("xmin","xmin",this,_xmin),
   xmax("xmax","xmax",this,_xmax),
   alpha("alpha","alpha",this,_alpha),
   epsilon("epsilon","epsilon",this,_epsilon)
 { 
 } 


 RooTruncatedExponential::RooTruncatedExponential(const RooTruncatedExponential& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   xmin("xmin",this,other.xmin),
   xmax("xmax",this,other.xmax),
   alpha("alpha",this,other.alpha),
   epsilon("epsilon",this,other.epsilon)
 { 
 } 



 Double_t RooTruncatedExponential::evaluate() const 
 { 
   Double_t f = TMath::Exp(alpha*TMath::Abs(x - mean));
   if (xmin <= x && x <= xmax)
     return  f;
   else
     return epsilon * f;
 } 



