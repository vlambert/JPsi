/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "JPsi/MuMu/interface/RooRelativisticBreitWigner.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooRelativisticBreitWigner) 

 RooRelativisticBreitWigner::RooRelativisticBreitWigner(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _width) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   width("width","width",this,_width)
 { 
 } 


 RooRelativisticBreitWigner::RooRelativisticBreitWigner(const RooRelativisticBreitWigner& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   width("width",this,other.width)
 { 
 } 



 Double_t RooRelativisticBreitWigner::evaluate() const 
 { 
   // See 
   // http://en.wikipedia.org/wiki/Relativistic_Breit%E2%80%93Wigner_distribution
   // http://arxiv.org/pdf/hep-ex/0202023v1
   // Leaving out the normalization factor 4mg/(pi+2*arctan(m/g))
   // where m and g are the mean and and the width.
   double x2 = x*x;
   double x4 = x2*x2;
   double m2 = mean * mean;
   double x2_m2 = x2 - m2;
   double x2_m2_2 = x2_m2 * x2_m2;   
   return  TMath::Abs(x) / (x2_m2_2 + x4 * width * width / m2); 
 } 



