/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 * PHOSPHOR Model PDF - PHOton energy Scale and PHOton energy Resolution Fit *
 * Jan Veverka, Caltech, 8 February 2012                                     *
 *****************************************************************************/

#ifndef JPSI_MUMU_ROOPHOSPHORPDF_H
#define JPSI_MUMU_ROOPHOSPHORPDF_H

#include <iostream>
#include <vector>
#include "RooHistPdf.h"
#include "RooDataHist.h"
#include "RooRealProxy.h"
#include "RooRealVar.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TList.h"
 
class RooPhosphorPdf : public RooHistPdf {
public:
  RooPhosphorPdf() {} ; 
  RooPhosphorPdf(const char *name, const char *title,
		 RooAbsReal& _mass,
		 RooAbsReal& _msubs,
		 RooRealVar& _phos,
		 RooRealVar& _phor,
		 const RooDataHist& _massPhorHist, Int_t intOrder = 0);
  RooPhosphorPdf(const RooPhosphorPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { 
    return new RooPhosphorPdf(*this, newname); 
  }
  virtual ~RooPhosphorPdf();

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, 
			      const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;
  
  virtual inline RooArgSet const& getNormCache() const {return *normCache;}
  virtual inline TList const& getListOfNormDataHists() const {
    return *listOfNormDataHists;
  }

protected:

  RooRealProxy mass ;
  RooRealProxy msubs ;
  RooRealProxy phos ;
  RooRealProxy phor ;
  
  Int_t intOrder ;
  RooRealVar *cachePhos ;
  RooRealVar *cachePhor ;
  RooArgSet *normCache ;
  TList *listOfNormDataHists ;

  Double_t evaluate() const ;

private:

  ClassDef(RooPhosphorPdf, 1) // Your description goes here...
};
 
#endif
